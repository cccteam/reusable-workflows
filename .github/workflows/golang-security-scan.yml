# This workflow performs security scanning for Go projects.
#  - govulncheck-action is used to check for vulnerabilities in the Go modules
#  - trivy-action is used to check for vulnerabilities in the application's final docker image (optional)
#  - Dependabot security alerts are checked using the GitHub API
# GitHub issues are created for failed jobs.
# A Slack message is sent (per user provided details) if either security check fails.
#
# NOTE: This workflow has required inputs. Refer to the 'inputs' & 'secrets' sections below.
name: Golang Security Scan Template
on:
  workflow_call:
    inputs:
      slack-channel-id:
        required: false
        type: string
        description: Overrides secrets.SLACK_CHANNEL_ID as the channel ID for sending Slack notifications for a failed scan.
      govulncheck-version:
        required: false
        type: string
        default: "latest"
        description: Version of govulncheck to use
      execute-trivy-scan:
        required: false
        type: boolean
        default: true
      execute-dependabot-check:
        required: false
        type: boolean
        default: true
        description: "Execute the Dependabot security alerts check"
      working-directory:
        required: false
        type: string
        default: .
      docker-build-args:
        required: false
        type: string
        default: "[]" # empty array
        description: Json-formatted array of strings to pass to the docker build command as build args. e.g. '["arg1", "arg2"]'
      scan-latest-release:
        required: false
        description: "Scan the latest release of the repository in addition to the default branch"
        default: true
        type: boolean
      ignored-dependabot-alerts-path:
        required: false
        type: string
        default: ""
        description: >
          Path to a json file that contains a JSON array of Dependabot alerts to ignore. 
          If not provided, no alerts will be ignored.

          Note: These alerts should be copied directly from the Dependabot issue so that the formatting is as expected.
    secrets:
      SLACK_BOT_TOKEN:
        required: true
        description: Token for sending Slack notifications for a failed scan
      SLACK_CHANNEL_ID:
        required: true
        description: Channel ID for sending Slack notifications for a failed scan. This can be overridden by the 'slack-channel-id' input.
      DEPENDABOT_ALERTS_TOKEN:
        required: true
        description: Token for checking Dependabot security alerts

jobs:
  env-setup:
    name: Environment Setup
    runs-on: ubuntu-latest
    outputs:
      checkout-refs: "[${{ steps.set_checkout_refs.outputs.checkout_refs }}]"
    steps:
      - name: Get latest release
        if: ${{ inputs.scan-latest-release }}
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          script: |
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            console.log(`Latest release: ${latestRelease.data.tag_name}`);
            return latestRelease.data.tag_name;
      - name: Set checkout refs
        id: set_checkout_refs
        run: |
          if [[ "${{ inputs.scan-latest-release }}" == "true" ]]; then
            echo "checkout_refs='','${{ steps.get_latest_release.outputs.result }}'" >> $GITHUB_OUTPUT
          else
            echo "checkout_refs=''" >> $GITHUB_OUTPUT
          fi

  govulncheck:
    needs: env-setup
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        checkout-ref: ${{ fromJson(needs.env-setup.outputs.checkout-refs) }}
    steps:
      - name: Set report variables
        run: |
          echo "REPORT_NAME=govulncheck-${{ matrix.checkout-ref == '' && '1' || '2' }}" >> $GITHUB_ENV
          echo "REPORT_PATH=govulncheck-report-${{ matrix.checkout-ref == '' && '1' || '2' }}.txt" >> $GITHUB_ENV

      - name: Set up Go for govulncheck
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
          cache: false

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@${{ inputs.govulncheck-version }}
        shell: bash

      - uses: actions/checkout@v4
        with:
          ref: ${{ matrix.checkout-ref }}
          fetch-tags: true

      - name: Set up Go for app
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ inputs.working-directory }}/go.mod
          cache: false

      - name: Run govulncheck
        continue-on-error: true
        run: |
          set +e # Ensure the script does not exit immediately on error
          govulncheck -C ${{ inputs.working-directory }} ./... > ${{ env.REPORT_PATH }}
          GOVULNCHECK_STATUS=$?
          if [ $GOVULNCHECK_STATUS -ne 0 ]; then
            touch vulnerabilities-found
          fi
        shell: bash

      - name: Save govulncheck report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPORT_NAME }}
          path: ${{ env.REPORT_PATH }}

      - name: Report findings
        run: |
          if [[ -f vulnerabilities-found ]]; then
            cat ${{ env.REPORT_PATH }}
            exit 1;
          else
            echo "No vulnerabilities found"
          fi
        shell: bash

  trivy:
    needs: env-setup
    name: Trivy Scan
    runs-on: ubuntu-latest
    if: ${{ inputs.execute-trivy-scan }}
    strategy:
      fail-fast: false
      matrix:
        checkout-ref: ${{ fromJson(needs.env-setup.outputs.checkout-refs) }}
    steps:
      - name: Set report variables
        run: |
          echo "REPORT_NAME=trivy-${{ matrix.checkout-ref == '' && '1' || '2' }}" >> $GITHUB_ENV
          echo "REPORT_PATH=trivy-report-${{ matrix.checkout-ref == '' && '1' || '2' }}.txt" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          ref: ${{ matrix.checkout-ref }}
          fetch-tags: true

      - name: Prepare Docker build args
        id: prepare-build-args
        run: |
          build_args='${{ inputs.docker-build-args }}'
          build_args=$(echo $build_args | jq -r '.[] | "--build-arg " + .' | xargs)
          echo "BUILD_ARGS=$build_args" >> $GITHUB_ENV

      - name: Build docker image
        run: |
          repo_name=$(echo "${{ github.repository }}" | awk '{print tolower($0)}')
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV
          docker build $BUILD_ARGS -t $repo_name:latest .

      - name: Run Trivy vulnerability scanner (capture findings)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.REPO_NAME }}:latest"
          format: "table"
          output: ${{ env.REPORT_PATH }}
          vuln-type: "os,library"
          severity: "LOW,MEDIUM,HIGH,CRITICAL"

      - name: Save Trivy report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPORT_NAME }}
          path: ${{ env.REPORT_PATH }}

      - name: Report findings
        run: |
          FILE=${{ env.REPORT_PATH }}
          if ! grep -qiE "Total: [1-9]" "$FILE"; then
            if grep -qiE "Total: 0" "$FILE"; then
              echo "No vulnerabilities found"
              exit 0;
            else
              echo "failed to properly parse the trivy report!\nFailed to find a Total line\n"
            fi
          fi
          cat ${{ env.REPORT_PATH }}
          exit 1;
        shell: bash

  dependabot:
    runs-on: ubuntu-latest
    if: ${{ inputs.execute-dependabot-check }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare ignored alerts file
        run: |
          IGNORED_ALERTS_PATH="${{ inputs.ignored-dependabot-alerts-path }}"
          if [[ -z "$IGNORED_ALERTS_PATH" || ! -f "$IGNORED_ALERTS_PATH" ]]; then
            echo "[]" > ignored-alerts.json
          else
            if ! jq -c '.' "$IGNORED_ALERTS_PATH" > ignored-alerts.json; then
              echo "[]" > ignored-alerts.json
            fi
          fi

      - name: Check for Dependabot security alerts
        run: |
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.DEPENDABOT_ALERTS_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            ${{ github.api_url }}/repos/${{ github.repository }}/dependabot/alerts?state=open \
            -o alerts.json

          if [[ $(jq '. | length' alerts.json) -gt 0 ]]; then
            jq -c '.[] | {url: .url, dependency: .dependency, summary: .security_advisory.summary, severity: .security_advisory.severity, updated_at: .updated_at}' alerts.json | while read alert; do
              echo "Alert: $alert"

              is_alert_ignored=$(jq --argjson alert "$alert" 'any(. == $alert)' ignored-alerts.json)
              echo -e "alert ignored: $is_alert_ignored\n"

              if [[ "$is_alert_ignored" == "false" ]]; then
                echo "$alert" >> not_ignored_alerts.txt
              fi
            done
            if [[ -f not_ignored_alerts.txt ]]; then
              jq -s '.' not_ignored_alerts.txt > dependabot-report-1.txt
            else
              echo '[]' > dependabot-report-1.txt
            fi
          else
            echo '[]' > dependabot-report-1.txt
          fi

      - name: Upload Dependabot alerts
        uses: actions/upload-artifact@v4
        with:
          name: dependabot-1
          path: dependabot-report-1.txt

      - name: Fail job for Dependabot alerts
        run: |
          if [[ -f dependabot-report-1.txt && $(jq '. | length' dependabot-report-1.txt) -gt 0 ]]; then
            exit 1
          fi

  create_issues:
    name: Create issues for failed jobs
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        label: [govulncheck, trivy, dependabot]
    needs: [govulncheck, trivy, dependabot]
    if: always()
    steps:
      - name: Setup environment for this matrix job
        id: setup
        shell: bash
        run: |
          if [[ "${{ needs.govulncheck.result }}" == "failure" && "${{ matrix.label }}" == "govulncheck" ]] || \
           [[ "${{ needs.trivy.result }}" == "failure" && "${{ matrix.label }}" == "trivy" ]] || \
           [[ "${{ needs.dependabot.result }}" == "failure" && "${{ matrix.label }}" == "dependabot" ]]; then

            # Enable the steps to run
            echo "should_run=true" >> $GITHUB_OUTPUT

            # Set the issue title
            if [[ "${{ matrix.label }}" == "govulncheck" ]]; then
              ISSUE_TITLE="Go Vulnerability Report"
            elif [[ "${{ matrix.label }}" == "trivy" ]]; then
              ISSUE_TITLE="Trivy Vulnerability Report"
            elif [[ "${{ matrix.label }}" == "dependabot" ]]; then
              ISSUE_TITLE="Dependabot Security Alerts"
            fi

            echo "ISSUE_TITLE=$ISSUE_TITLE" >> $GITHUB_ENV
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

      - uses: actions/download-artifact@v4
        if: steps.setup.outputs.should_run == 'true'
        with:
          name: ${{ matrix.label }}-1

      - uses: actions/download-artifact@v4
        if: steps.setup.outputs.should_run == 'true' && inputs.scan-latest-release && matrix.label != 'dependabot'
        with:
          name: ${{ matrix.label }}-2

      - name: Format Issue Body content
        if: steps.setup.outputs.should_run == 'true'
        run: |
          echo -e "## $ISSUE_TITLE\n\nThe following vulnerabilities were identified in the ${{ github.event.repository.default_branch }} branch:\n\n\`\`\`" > formatted-results.md
          cat ${{ matrix.label }}-report-1.txt >> formatted-results.md
          if [[ -f ${{ matrix.label }}-report-2.txt ]]; then
            echo -e "\`\`\`\n\nThe following vulnerabilities were identified in the latest release:\n\n\`\`\`" >> formatted-results.md
            cat ${{ matrix.label }}-report-2.txt >> formatted-results.md
          fi
          echo -e "\`\`\`" >> formatted-results.md

      - name: Search for existing issue
        if: steps.setup.outputs.should_run == 'true'
        id: search_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const title = process.env.ISSUE_TITLE;
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              labels: "vulnerability,${{ matrix.label }}"
            });

            // Sort the issues by their creation date in descending order
            const sortedIssues = issues.data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            if (sortedIssues.length > 0) {
              const mostRecentIssue = sortedIssues[0];
              core.setOutput("issue_title", mostRecentIssue.title);
              core.setOutput("issue_number", mostRecentIssue.number);

              if (sortedIssues.length > 1) {
                // If there are multiple issues, log their numbers
                const issueNumbers = sortedIssues.map(issue => issue.number).join(', ');
                console.warn(`Multiple issues found: ${issueNumbers}. Processing the most recent one: ${mostRecentIssue.number}`);
              } else {
                console.log(`Most recent issue found: ${mostRecentIssue.number}`);
              }
            } else {
              core.setOutput("issue_title", title);
              core.setOutput("issue_number", "");
              console.log("No existing issue found");
            }

      - name: Update or Create Issue
        if: steps.setup.outputs.should_run == 'true'
        id: create_issue
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: ${{ steps.search_issue.outputs.issue_title }}
          content-filepath: ./formatted-results.md
          labels: vulnerability,${{ matrix.label }}
          issue-number: ${{ steps.search_issue.outputs.issue_number }}

      - name: Get issue URL
        if: steps.setup.outputs.should_run == 'true'
        id: get_issue_url
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issueNumber = ${{ steps.create_issue.outputs.issue-number }};
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            return issue.data.html_url;

      - name: Write issue info to file
        if: steps.setup.outputs.should_run == 'true'
        run: |
          echo "*_${{ matrix.label }}_ issue:* ${{ steps.get_issue_url.outputs.result }}" >> ${{ matrix.label }}-issue.txt

      - name: Upload issue artifact
        if: steps.setup.outputs.should_run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.label }}-issue
          path: ${{ matrix.label }}-issue.txt

  slack_notification:
    name: Send Slack notification for failed jobs
    runs-on: ubuntu-latest
    needs: [govulncheck, trivy, create_issues, dependabot]
    if: always() && (needs.govulncheck.result == 'failure' || needs.trivy.result == 'failure' || needs.dependabot.result == 'failure')
    steps:
      - name: Download govulncheck issue artifact
        if: needs.govulncheck.result == 'failure'
        uses: actions/download-artifact@v4
        with:
          name: govulncheck-issue
        continue-on-error: true # Continue if the artifact is not found

      - name: Download trivy issue artifact
        if: inputs.execute-trivy-scan && needs.trivy.result == 'failure'
        uses: actions/download-artifact@v4
        with:
          name: trivy-issue
        continue-on-error: true # Continue if the artifact is not found

      - name: Download dependabot issue artifact
        if: inputs.execute-dependabot-check && needs.dependabot.result == 'failure'
        uses: actions/download-artifact@v4
        with:
          name: dependabot-issue
        continue-on-error: true # Continue if the artifact is not found

      - name: Prepare Slack message
        id: prepare_message
        run: |
          MESSAGE="URGENT! The security scan failed for the *${{ github.repository }}* repository. Check the logs at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          if [ -f govulncheck-issue.txt ]; then
            MESSAGE="$MESSAGE
            - $(cat govulncheck-issue.txt)"
          fi
          if [ -f trivy-issue.txt ]; then
            MESSAGE="$MESSAGE
            - $(cat trivy-issue.txt)"
          fi
          if [ -f dependabot-issue.txt ]; then
            MESSAGE="$MESSAGE
            - $(cat dependabot-issue.txt)"
          fi
          echo 'SLACK_MESSAGE<<EOF' >> $GITHUB_ENV
          echo "$MESSAGE" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - uses: slackapi/slack-github-action@v1.27.0
        with:
          channel-id: ${{ inputs.slack-channel-id || secrets.SLACK_CHANNEL_ID }}
          slack-message: ${{ env.SLACK_MESSAGE }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
